{"version":3,"file":"static/js/6911.6fadf3e9.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/interaction-particles-links/browser/Linker.js"],"sourcesContent":["import { Circle, ParticlesInteractorBase, getDistances, getLinkRandomColor, } from \"@tsparticles/engine\";\nimport { Links } from \"./Options/Classes/Links.js\";\nconst squarePower = 2, opacityOffset = 1, origin = {\n    x: 0,\n    y: 0,\n}, minDistance = 0;\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    const { dx, dy, distance } = getDistances(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const absDiffs = {\n        x: Math.abs(dx),\n        y: Math.abs(dy),\n    }, warpDistances = {\n        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\n        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y),\n    };\n    return Math.sqrt(warpDistances.x ** squarePower + warpDistances.y ** squarePower);\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n        this._setColor = (p1) => {\n            if (!p1.options.links) {\n                return;\n            }\n            const container = this.linkContainer, linksOptions = p1.options.links;\n            let linkColor = linksOptions.id === undefined\n                ? container.particles.linksColor\n                : container.particles.linksColors.get(linksOptions.id);\n            if (linkColor) {\n                return;\n            }\n            const optColor = linksOptions.color;\n            linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n                container.particles.linksColor = linkColor;\n            }\n            else {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n        };\n        this.linkContainer = container;\n    }\n    clear() {\n    }\n    init() {\n        this.linkContainer.particles.linksColor = undefined;\n        this.linkContainer.particles.linksColors = new Map();\n    }\n    async interact(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < origin.x || pos1.y < origin.y || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? minDistance, warp = linkOpt1.warp;\n        let range;\n        if (warp) {\n            const { CircleWarp } = await import(\"./CircleWarp.js\");\n            range = new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize);\n        }\n        else {\n            range = new Circle(pos1.x, pos1.y, optDistance);\n        }\n        const query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !linkOpt2?.enable ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.some((t) => t.destination === p2) ||\n                p2.links.some((t) => t.destination === p1)) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < origin.x || pos2.y < origin.y || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                continue;\n            }\n            const opacityLine = (opacityOffset - distance / optDistance) * optOpacity;\n            this._setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        return !!particle.options.links?.enable;\n    }\n    loadParticlesOptions(options, ...sources) {\n        if (!options.links) {\n            options.links = new Links();\n        }\n        for (const source of sources) {\n            options.links.load(source?.links);\n        }\n    }\n    reset() {\n    }\n}\n"],"names":["origin","getLinkDistance","pos1","pos2","optDistance","canvasSize","warp","_getDistances","getDistances","dx","dy","distance","absDiffs","x","Math","abs","y","warpDistances","min","width","height","sqrt","pow","Linker","_ParticlesInteractorB","_inherits","_super","_createSuper","container","_this","_classCallCheck","call","_setColor","p1","options","links","linkContainer","linksOptions","linkColor","undefined","id","particles","linksColor","linksColors","get","optColor","color","getLinkRandomColor","blink","consent","set","_createClass","key","value","this","Map","_interact","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_p1$retina$linksDista","linkOpt1","optOpacity","range","_yield$import","CircleWarp","query","_iterator","_step","_loop","_this2","wrap","_context2","prev","next","abrupt","getPosition","canvas","size","opacity","retina","linksDistance","sent","Circle","quadTree","_createForOfIteratorHelper","p2","linkOpt2","opacityLine","_context","enable","spawning","destroyed","some","t","destination","push","stop","s","n","done","delegateYield","t0","t1","e","f","finish","_x","apply","arguments","particle","_particle$options$lin","Links","_len","length","sources","Array","_key","_i","_sources","source","load","ParticlesInteractorBase"],"sourceRoot":""}