{"version":3,"file":"static/js/7735.333065f0.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShape.js","../node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShapeGenerator.js","../node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js"],"sourcesContent":["import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom } from \"@tsparticles/engine\";\nconst quarter = 0.25, double = 2, doublePI = Math.PI * double, squareExp = 2, half = 0.5;\nexport class EmittersCircleShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    async randomPosition() {\n        const size = this.size, fill = this.fill, position = this.position, generateTheta = (x, y) => {\n            const u = getRandom() * quarter, theta = Math.atan((y / x) * Math.tan(doublePI * u)), v = getRandom();\n            if (v < quarter) {\n                return theta;\n            }\n            else if (v < double * quarter) {\n                return Math.PI - theta;\n            }\n            else if (v < double * quarter + quarter) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** squareExp + (x * Math.sin(theta)) ** squareExp), [a, b] = [size.width * half, size.height * half], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n        return Promise.resolve({\n            position: {\n                x: position.x + randomRadius * Math.cos(randomTheta),\n                y: position.y + randomRadius * Math.sin(randomTheta),\n            },\n        });\n    }\n}\n","import { EmittersCircleShape } from \"./EmittersCircleShape.js\";\nexport class EmittersCircleShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersCircleShape(position, size, fill, options);\n    }\n}\n","export class EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n"],"names":["quarter","doublePI","Math","PI","EmittersCircleShape","_EmitterShapeBase","_inherits","_super","_createSuper","position","size","fill","options","_classCallCheck","call","_createClass","key","value","_init","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","apply","arguments","_randomPosition","_callee2","generateTheta","radius","a","b","randomTheta","maxRadius","randomRadius","_context2","this","x","y","u","getRandom","theta","atan","tan","v","double","sqrt","pow","cos","sin","width","height","abrupt","Promise","resolve","EmitterShapeBase","EmittersCircleShapeGenerator"],"sourceRoot":""}