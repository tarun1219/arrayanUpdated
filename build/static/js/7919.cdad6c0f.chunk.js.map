{"version":3,"file":"static/js/7919.cdad6c0f.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/updater-destroy/browser/Options/Classes/DestroyBounds.js","../node_modules/@tsparticles/updater-destroy/browser/Options/Classes/SplitFactor.js","../node_modules/@tsparticles/updater-destroy/browser/Options/Classes/SplitRate.js","../node_modules/@tsparticles/updater-destroy/browser/Options/Classes/Split.js","../node_modules/@tsparticles/updater-destroy/browser/Options/Classes/Destroy.js","../node_modules/@tsparticles/updater-destroy/browser/Utils.js","../node_modules/@tsparticles/updater-destroy/browser/DestroyUpdater.js"],"sourcesContent":["import { setRangeValue } from \"@tsparticles/engine\";\nexport class DestroyBounds {\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.bottom !== undefined) {\n            this.bottom = setRangeValue(data.bottom);\n        }\n        if (data.left !== undefined) {\n            this.left = setRangeValue(data.left);\n        }\n        if (data.right !== undefined) {\n            this.right = setRangeValue(data.right);\n        }\n        if (data.top !== undefined) {\n            this.top = setRangeValue(data.top);\n        }\n    }\n}\n","import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class SplitFactor extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = 3;\n    }\n}\n","import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class SplitRate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = { min: 4, max: 9 };\n    }\n}\n","import { OptionsColor, deepExtend, executeOnSingleOrMultiple, } from \"@tsparticles/engine\";\nimport { SplitFactor } from \"./SplitFactor.js\";\nimport { SplitRate } from \"./SplitRate.js\";\nexport class Split {\n    constructor() {\n        this.count = 1;\n        this.factor = new SplitFactor();\n        this.rate = new SplitRate();\n        this.sizeOffset = true;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.factor.load(data.factor);\n        this.rate.load(data.rate);\n        this.particles = executeOnSingleOrMultiple(data.particles, (particles) => {\n            return deepExtend({}, particles);\n        });\n        if (data.sizeOffset !== undefined) {\n            this.sizeOffset = data.sizeOffset;\n        }\n        if (data.colorOffset) {\n            this.colorOffset = this.colorOffset ?? {};\n            if (data.colorOffset.h !== undefined) {\n                this.colorOffset.h = data.colorOffset.h;\n            }\n            if (data.colorOffset.s !== undefined) {\n                this.colorOffset.s = data.colorOffset.s;\n            }\n            if (data.colorOffset.l !== undefined) {\n                this.colorOffset.l = data.colorOffset.l;\n            }\n        }\n    }\n}\n","import { DestroyBounds } from \"./DestroyBounds.js\";\nimport { Split } from \"./Split.js\";\nexport class Destroy {\n    constructor() {\n        this.bounds = new DestroyBounds();\n        this.mode = \"none\";\n        this.split = new Split();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.mode) {\n            this.mode = data.mode;\n        }\n        if (data.bounds) {\n            this.bounds.load(data.bounds);\n        }\n        this.split.load(data.split);\n    }\n}\n","import { getRangeValue, isNumber, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue, } from \"@tsparticles/engine\";\nconst defaultOffset = 0, minDestroySize = 0.5, defaultSplitCount = 0, increment = 1, unbreakableTime = 500, minSplitCount = 0;\nasync function addSplitParticle(engine, container, parent, splitParticlesOptions) {\n    const destroyOptions = parent.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split, options = loadParticlesOptions(engine, container, parent.options), factor = getRangeValue(splitOptions.factor.value), parentColor = parent.getFillColor();\n    if (splitOptions.color) {\n        options.color.load(splitOptions.color);\n    }\n    else if (splitOptions.colorOffset && parentColor) {\n        options.color.load({\n            value: {\n                hsl: {\n                    h: parentColor.h + getRangeValue(splitOptions.colorOffset.h ?? defaultOffset),\n                    s: parentColor.s + getRangeValue(splitOptions.colorOffset.s ?? defaultOffset),\n                    l: parentColor.l + getRangeValue(splitOptions.colorOffset.l ?? defaultOffset),\n                },\n            },\n        });\n    }\n    else {\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n    }\n    options.move.load({\n        center: {\n            x: parent.position.x,\n            y: parent.position.y,\n            mode: \"precise\",\n        },\n    });\n    if (isNumber(options.size.value)) {\n        options.size.value /= factor;\n    }\n    else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n    }\n    options.load(splitParticlesOptions);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : defaultOffset, position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset),\n    };\n    return container.particles.addParticle(position, options, parent.group, (particle) => {\n        if (particle.size.value < minDestroySize) {\n            return false;\n        }\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = (parent.splitCount ?? defaultSplitCount) + increment;\n        particle.unbreakable = true;\n        setTimeout(() => {\n            particle.unbreakable = false;\n        }, unbreakableTime);\n        return true;\n    });\n}\nexport async function split(engine, container, particle) {\n    const destroyOptions = particle.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split;\n    if (splitOptions.count >= minSplitCount &&\n        (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n        return;\n    }\n    const rate = getRangeValue(splitOptions.rate.value), particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n    for (let i = 0; i < rate; i++) {\n        await addSplitParticle(engine, container, particle, particlesSplitOptions);\n    }\n}\n","import { getRangeValue, percentDenominator, } from \"@tsparticles/engine\";\nimport { Destroy } from \"./Options/Classes/Destroy.js\";\nimport { split } from \"./Utils.js\";\nexport class DestroyUpdater {\n    constructor(engine, container) {\n        this.container = container;\n        this.engine = engine;\n    }\n    async init(particle) {\n        const container = this.container, particlesOptions = particle.options, destroyOptions = particlesOptions.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        particle.splitCount = 0;\n        const destroyBoundsOptions = destroyOptions.bounds;\n        if (!particle.destroyBounds) {\n            particle.destroyBounds = {};\n        }\n        const { bottom, left, right, top } = destroyBoundsOptions, { destroyBounds } = particle, canvasSize = container.canvas.size;\n        if (bottom) {\n            destroyBounds.bottom = (getRangeValue(bottom) * canvasSize.height) / percentDenominator;\n        }\n        if (left) {\n            destroyBounds.left = (getRangeValue(left) * canvasSize.width) / percentDenominator;\n        }\n        if (right) {\n            destroyBounds.right = (getRangeValue(right) * canvasSize.width) / percentDenominator;\n        }\n        if (top) {\n            destroyBounds.top = (getRangeValue(top) * canvasSize.height) / percentDenominator;\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.destroy) {\n            options.destroy = new Destroy();\n        }\n        for (const source of sources) {\n            options.destroy.load(source?.destroy);\n        }\n    }\n    particleDestroyed(particle, override) {\n        if (override) {\n            return;\n        }\n        const destroyOptions = particle.options.destroy;\n        if (destroyOptions && destroyOptions.mode === \"split\") {\n            void split(this.engine, this.container, particle);\n        }\n    }\n    async update(particle) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const position = particle.getPosition(), bounds = particle.destroyBounds;\n        if (!bounds) {\n            return;\n        }\n        if ((bounds.bottom !== undefined && position.y >= bounds.bottom) ||\n            (bounds.left !== undefined && position.x <= bounds.left) ||\n            (bounds.right !== undefined && position.x >= bounds.right) ||\n            (bounds.top !== undefined && position.y <= bounds.top)) {\n            particle.destroy();\n        }\n        await Promise.resolve();\n    }\n}\n"],"names":["DestroyBounds","_classCallCheck","_createClass","key","value","data","undefined","bottom","this","setRangeValue","left","right","top","SplitFactor","_ValueWithRandom","_inherits","_super","_createSuper","_this","call","ValueWithRandom","SplitRate","min","max","Split","count","factor","rate","sizeOffset","_this$colorOffset","color","OptionsColor","create","load","particles","executeOnSingleOrMultiple","deepExtend","colorOffset","h","s","l","Destroy","bounds","mode","split","defaultOffset","minDestroySize","defaultSplitCount","increment","unbreakableTime","minSplitCount","addSplitParticle","_x","_x2","_x3","_x4","_addSplitParticle","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","engine","container","parent","splitParticlesOptions","destroyOptions","splitOptions","options","parentColor","_splitOptions$colorOf","_splitOptions$colorOf2","_splitOptions$colorOf3","offset","position","wrap","_context","prev","next","destroy","abrupt","loadParticlesOptions","getRangeValue","getFillColor","hsl","move","center","x","y","isNumber","size","randomInRange","addParticle","group","particle","_parent$splitCount","velocity","length","splitCount","unbreakable","setTimeout","stop","_split","_callee2","particlesSplitOptions","i","_context2","itemFromSingleOrMultiple","DestroyUpdater","_init","particlesOptions","destroyBoundsOptions","destroyBounds","canvasSize","canvas","height","percentDenominator","width","Promise","resolve","destroyed","_len","sources","Array","_key","_i","_sources","source","override","_x5","_x6","_x7","_update","isEnabled","getPosition"],"sourceRoot":""}