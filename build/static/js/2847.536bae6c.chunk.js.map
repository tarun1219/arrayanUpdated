{"version":3,"file":"static/js/2847.536bae6c.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/shape-image/browser/ImageDrawer.js"],"sourcesContent":["import { errorPrefix } from \"@tsparticles/engine\";\nconst double = 2, defaultAlpha = 1, sides = 12, defaultRatio = 1;\nexport class ImageDrawer {\n    constructor(engine) {\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    async draw(data) {\n        const { context, radius, particle, opacity } = data, image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            const { drawGif } = await import(\"./GifUtils/Utils.js\");\n            drawGif(data);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            }, diameter = radius * double;\n            context.drawImage(element, pos.x, pos.y, diameter, diameter / ratio);\n        }\n        context.globalAlpha = defaultAlpha;\n    }\n    getSidesCount() {\n        return sides;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    async loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            await this.loadImageShape(imageData);\n            await this.loadShape(particle);\n        }\n    }\n    async particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                void this.particleInit(container, particle);\n            });\n            return;\n        }\n        let imageRes;\n        if (image.svgData && color) {\n            const { replaceImageColor } = await import(\"./Utils.js\");\n            imageRes = await replaceImageColor(image, imageData, color, particle);\n        }\n        else {\n            imageRes = {\n                color,\n                data: image,\n                element: image.element,\n                gif: image.gif,\n                gifData: image.gifData,\n                gifLoopCount: image.gifLoopCount,\n                loaded: true,\n                ratio: imageData.width && imageData.height\n                    ? imageData.width / imageData.height\n                    : image.ratio ?? defaultRatio,\n                replaceColor: replaceColor,\n                source: imageData.src,\n            };\n        }\n        if (!imageRes.ratio) {\n            imageRes.ratio = 1;\n        }\n        const fill = imageData.fill ?? particle.shapeFill, close = imageData.close ?? particle.shapeClose, imageShape = {\n            image: imageRes,\n            fill,\n            close,\n        };\n        particle.image = imageShape.image;\n        particle.shapeFill = imageShape.fill;\n        particle.shapeClose = imageShape.close;\n    }\n}\n"],"names":["ImageDrawer","engine","_this","_classCallCheck","this","loadImageShape","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","imageShape","_imageShape$replaceCo","wrap","_context","prev","next","_engine","loadImage","Error","concat","errorPrefix","gif","name","replaceColor","src","stop","_x","apply","arguments","_createClass","key","value","image","images","push","_draw","_callee2","data","context","radius","particle","opacity","element","_yield$import","ratio","pos","diameter","_context2","abrupt","globalAlpha","gifData","sent","drawGif","x","y","drawImage","_x2","_init","_callee3","container","options","_iterator","_step","imageData","_context3","actualOptions","preload","_createForOfIteratorHelper","s","n","done","t0","e","f","finish","_x3","_loadShape","_callee4","_context4","shape","shapeData","find","t","source","loadShape","_x4","_particleInit","_callee5","_imageData$replaceCol","_imageData$fill","_imageData$close","color","imageRes","_yield$import2","replaceImageColor","_image$ratio","fill","close","_this2","_context5","getFillColor","loading","setTimeout","particleInit","svgData","gifLoopCount","loaded","width","height","shapeFill","shapeClose","_x5","_x6"],"sourceRoot":""}