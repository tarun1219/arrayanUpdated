{"version":3,"file":"static/js/1037.a021ee2b.chunk.js","mappings":"2OAEaA,EAAU,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GACnB,SAAAA,EAAYK,EAAGC,EAAGC,EAAQC,GAAY,IAAAC,EAGE,OAHFC,EAAAA,EAAAA,GAAA,KAAAV,IAClCS,EAAAN,EAAAQ,KAAA,KAAMN,EAAGC,EAAGC,IACPC,WAAaA,EAClBC,EAAKD,YAAUI,EAAAA,EAAAA,GAAA,GAAQJ,GAAaC,CACxC,CA0BC,OA1BAI,EAAAA,EAAAA,GAAAb,EAAA,EAAAc,IAAA,WAAAC,MACD,SAASC,GACL,IAAAC,EAA0BC,KAAKV,WAAvBW,EAAKF,EAALE,MAAOC,EAAMH,EAANG,OACPf,EAASW,EAATX,EAAGC,EAAMU,EAANV,EACX,OAAQe,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAtB,EAAAuB,WAAA,iBAAAZ,KAAA,KAAeK,KAAKK,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAtB,EAAAuB,WAAA,iBAAAZ,KAAA,KACT,CAAEN,EAAGA,EAAIc,EAAOb,EAAAA,MAAIe,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAtB,EAAAuB,WAAA,iBAAAZ,KAAA,KACpB,CAAEN,EAAGA,EAAIc,EAAOb,EAAGA,EAAIc,MAASC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAtB,EAAAuB,WAAA,iBAAAZ,KAAA,KAChC,CAAEN,EAAAA,EAAGC,EAAGA,EAAIc,GACnC,GAAC,CAAAN,IAAA,aAAAC,MACD,SAAWS,GACP,IAAAH,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAtB,EAAAuB,WAAA,mBAAAZ,KAAA,KAAqBa,GACjB,OAAO,EAEX,IAAMC,EAAOD,EAAOE,EAASF,EAAOG,EAAS,CACzCtB,EAAGmB,EAAMI,SAASvB,EAAIa,KAAKV,WAAWW,MACtCb,EAAGkB,EAAMI,SAAStB,EAAIY,KAAKV,WAAWY,QAE1C,QAAsBS,IAAlBH,EAAOnB,OAAsB,CAC7B,IAAMuB,EAAe,IAAIC,EAAAA,GAAOJ,EAAOtB,EAAGsB,EAAOrB,EAxB9C,EAwBiDoB,EAAOnB,QAC3D,OAAAc,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAtB,EAAAuB,WAAA,mBAAAZ,KAAA,KAAwBmB,EAC5B,CACK,QAAkBD,IAAdJ,EAAKO,KAAoB,CAC9B,IAAMC,EAAS,IAAIC,EAAAA,GAAUP,EAAOtB,EAAGsB,EAAOrB,EA5B3C,EA4B8CmB,EAAKO,KAAKb,MA5BxD,EA4BwEM,EAAKO,KAAKZ,QACrF,OAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAtB,EAAAuB,WAAA,mBAAAZ,KAAA,KAAwBsB,EAC5B,CACA,OAAO,CACX,KAACjC,CAAA,CA/BkB,CAAS+B,EAAAA,G","sources":["../node_modules/@tsparticles/interaction-particles-links/browser/CircleWarp.js"],"sourcesContent":["import { Circle, Rectangle } from \"@tsparticles/engine\";\nconst double = 2;\nexport class CircleWarp extends Circle {\n    constructor(x, y, radius, canvasSize) {\n        super(x, y, radius);\n        this.canvasSize = canvasSize;\n        this.canvasSize = { ...canvasSize };\n    }\n    contains(point) {\n        const { width, height } = this.canvasSize;\n        const { x, y } = point;\n        return (super.contains(point) ||\n            super.contains({ x: x - width, y }) ||\n            super.contains({ x: x - width, y: y - height }) ||\n            super.contains({ x, y: y - height }));\n    }\n    intersects(range) {\n        if (super.intersects(range)) {\n            return true;\n        }\n        const rect = range, circle = range, newPos = {\n            x: range.position.x - this.canvasSize.width,\n            y: range.position.y - this.canvasSize.height,\n        };\n        if (circle.radius !== undefined) {\n            const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * double);\n            return super.intersects(biggerCircle);\n        }\n        else if (rect.size !== undefined) {\n            const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * double, rect.size.height * double);\n            return super.intersects(rectSW);\n        }\n        return false;\n    }\n}\n"],"names":["CircleWarp","_Circle","_inherits","_super","_createSuper","x","y","radius","canvasSize","_this","_classCallCheck","call","_objectSpread","_createClass","key","value","point","_this$canvasSize","this","width","height","_get","_getPrototypeOf","prototype","range","rect","circle","newPos","position","undefined","biggerCircle","Circle","size","rectSW","Rectangle"],"sourceRoot":""}