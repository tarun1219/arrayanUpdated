{"version":3,"file":"static/js/7669.1388b704.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/plugin-emitters/browser/EmitterInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, millisecondsToSeconds, randomInRange, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize.js\";\nconst half = 0.5, defaultLifeDelay = 0, minLifeCount = 0, defaultSpawnDelay = 0, defaultEmitDelay = 0, defaultLifeCount = -1, defaultColorAnimationFactor = 1;\nfunction setParticlesOptionsColor(particlesOptions, color) {\n    if (particlesOptions.color) {\n        particlesOptions.color.value = color;\n    }\n    else {\n        particlesOptions.color = {\n            value: color,\n        };\n    }\n}\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._destroy = () => {\n            this._mutationObserver?.disconnect();\n            this._mutationObserver = undefined;\n            this._resizeObserver?.disconnect();\n            this._resizeObserver = undefined;\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined, minDuration = 0, minLifeCount = 0;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > minLifeCount || this._immortal) &&\n                duration !== undefined &&\n                duration > minDuration) {\n                this._duration = duration * millisecondsToSeconds;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue, factor = defaultColorAnimationFactor) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (delay * millisecondsToSeconds) / container.retina.reduceFactor, defaultColorSpeed = 0, colorSpeed = getRangeValue(animation.speed ?? defaultColorSpeed);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * factor) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay =\n            (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._lifeCount = this.options.life.count ?? defaultLifeCount;\n        this._immortal = this._lifeCount <= minLifeCount;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                this._mutationObserver = new MutationObserver(() => {\n                    this.resize();\n                });\n                this._resizeObserver = new ResizeObserver(() => {\n                    this.resize();\n                });\n                this._mutationObserver.observe(element, {\n                    attributes: true,\n                    attributeFilter: [\"style\", \"width\", \"height\"],\n                });\n                this._resizeObserver.observe(element);\n            }\n        }\n        const shapeOptions = this.options.shape, shapeGenerator = this._engine.emitterShapeManager?.getShapeGenerator(shapeOptions.type);\n        if (shapeGenerator) {\n            this._shape = shapeGenerator.generate(this.position, this.size, this.fill, shapeOptions.options);\n        }\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    async init() {\n        await this._shape?.init();\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > minLifeCount || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? defaultSpawnDelay)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (delay * millisecondsToSeconds) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > minLifeCount || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._shape?.resize(this.position, this.size);\n    }\n    async update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? defaultSpawnDelay;\n            this._currentEmitDelay = this._emitDelay ?? defaultEmitDelay;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            await this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > minLifeCount || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._shape?.resize(this.position, this.size);\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                            this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                await this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n    _calcPosition() {\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect(), pxRatio = this.container.retina.pixelRatio;\n                return {\n                    x: (elRect.x + elRect.width * half) * pxRatio,\n                    y: (elRect.y + elRect.height * half) * pxRatio,\n                };\n            }\n        }\n        return calcPositionOrRandomFromSizeRanged({\n            size: this.container.canvas.size,\n            position: this.options.position,\n        });\n    }\n    _calcSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                    mode: \"precise\",\n                };\n            }\n        }\n        return (this.options.size ??\n            (() => {\n                const size = new EmitterSize();\n                size.load({\n                    height: 0,\n                    mode: \"percent\",\n                    width: 0,\n                });\n                return size;\n            })());\n    }\n    async _emit() {\n        if (this._paused) {\n            return;\n        }\n        const quantity = getRangeValue(this.options.rate.quantity);\n        await this._emitParticles(quantity);\n    }\n    async _emitParticles(quantity) {\n        const singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n        for (let i = 0; i < quantity; i++) {\n            const particlesOptions = deepExtend({}, singleParticlesOptions);\n            if (this.spawnColor) {\n                const hslAnimation = this.options.spawnColor?.animation;\n                if (hslAnimation) {\n                    const maxValues = {\n                        h: 360,\n                        s: 100,\n                        l: 100,\n                    }, colorFactor = 3.6;\n                    this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, maxValues.h, colorFactor);\n                    this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, maxValues.s);\n                    this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, maxValues.l);\n                }\n                setParticlesOptionsColor(particlesOptions, this.spawnColor);\n            }\n            const shapeOptions = this.options.shape;\n            let position = this.position;\n            if (this._shape) {\n                const shapePosData = await this._shape.randomPosition();\n                if (shapePosData) {\n                    position = shapePosData.position;\n                    const replaceData = shapeOptions.replace;\n                    if (replaceData.color && shapePosData.color) {\n                        setParticlesOptionsColor(particlesOptions, shapePosData.color);\n                    }\n                    if (replaceData.opacity) {\n                        if (particlesOptions.opacity) {\n                            particlesOptions.opacity.value = shapePosData.opacity;\n                        }\n                        else {\n                            particlesOptions.opacity = {\n                                value: shapePosData.opacity,\n                            };\n                        }\n                    }\n                }\n                else {\n                    position = null;\n                }\n            }\n            if (position) {\n                await this.container.particles.addParticle(position, particlesOptions);\n            }\n        }\n    }\n}\n"],"names":["setParticlesOptionsColor","particlesOptions","color","value","EmitterInstance","engine","emitters","container","options","position","_this$options$life$de","_this$_initialPositio","_particlesOptions","_particlesOptions2","_particlesOptions2$mo","_particlesOptions$mov","_particlesOptions$mov2","_this$options$life$co","_this$_engine$emitter","_this","_classCallCheck","this","_destroy","_this$_mutationObserv","_this$_resizeObserver","_mutationObserver","disconnect","undefined","_resizeObserver","removeEmitter","_engine","dispatchEvent","data","emitter","_prepareToDie","_this$options$life","_paused","duration","life","getRangeValue","retina","reduceFactor","_lifeCount","_immortal","_duration","millisecondsToSeconds","_setColorAnimation","animation","initValue","maxValue","_animation$speed","factor","arguments","length","enable","colorOffset","randomInRange","offset","emitFactor","rate","delay","speed","fpsLimit","_currentDuration","_currentEmitDelay","_currentSpawnDelay","_initialPosition","Emitter","load","_spawnDelay","_calcPosition","name","fill","_firstSpawn","wait","_startParticlesAdded","deepExtend","particles","move","direction","spawnColor","rangeColorToHsl","autoPlay","_size","_calcSize","size","getSize","canvas","count","domId","element","document","getElementById","MutationObserver","resize","ResizeObserver","observe","attributes","attributeFilter","shapeOptions","shape","shapeGenerator","emitterShapeManager","getShapeGenerator","type","_shape","generate","play","_createClass","key","pause","_init","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this$_shape","wrap","_context","prev","next","init","stop","apply","_emitDelay","_this$_spawnDelay","_this$_shape2","initialPosition","isPointInside","Vector","origin","_update","_callee2","delta","_this$_spawnDelay2","_this$_emitDelay","_this$_shape3","_this$options$life$de2","_context2","abrupt","_emitParticles","startCount","_emit","_x","elRect","getBoundingClientRect","pxRatio","pixelRatio","x","width","y","height","calcPositionOrRandomFromSizeRanged","_this$options$size","mode","EmitterSize","_emit2","_callee3","quantity","_context3","_emitParticles2","_callee4","singleParticlesOptions","i","_this$options$spawnCo","hslAnimation","maxValues","shapePosData","replaceData","_context4","itemFromSingleOrMultiple","h","s","l","randomPosition","sent","replace","opacity","addParticle","_x2"],"sourceRoot":""}