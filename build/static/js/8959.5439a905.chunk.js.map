{"version":3,"file":"static/js/8959.5439a905.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/plugin-absorbers/browser/AbsorberInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, percentDenominator, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { Absorber } from \"./Options/Classes/Absorber.js\";\nconst squareExp = 2, absorbFactor = 0.033, minOrbitLength = 0, minRadius = 0, minMass = 0, origin = {\n    x: 0,\n    y: 0,\n}, minAngle = 0, double = 2, maxAngle = Math.PI * double, minVelocity = 0;\nexport class AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        this.absorbers = absorbers;\n        this.container = container;\n        this._calcPosition = () => {\n            const exactPosition = calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n            return Vector.create(exactPosition.x, exactPosition.y);\n        };\n        this._updateParticlePosition = (particle, v) => {\n            if (particle.destroyed) {\n                return;\n            }\n            const container = this.container, canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n                const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });\n                particle.position.setTo(newPosition);\n                particle.velocity.setTo(particle.initialVelocity);\n                particle.absorberOrbit = undefined;\n                particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n                if (particle.absorberOrbit === undefined) {\n                    particle.absorberOrbit = Vector.origin;\n                    particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                    particle.absorberOrbit.angle = getRandom() * maxAngle;\n                }\n                if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                    const minSize = Math.min(canvasSize.width, canvasSize.height), offset = 1, randomOffset = 0.1, randomFactor = 0.2;\n                    particle.absorberOrbit.length = minSize * (offset + (getRandom() * randomFactor - randomOffset));\n                }\n                if (particle.absorberOrbitDirection === undefined) {\n                    particle.absorberOrbitDirection =\n                        particle.velocity.x >= minVelocity ? \"clockwise\" : \"counter-clockwise\";\n                }\n                const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n                particle.velocity.setTo(Vector.origin);\n                const updateFunc = {\n                    x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n                    y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos,\n                };\n                particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n                particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n                particle.absorberOrbit.length -= v.length;\n                particle.absorberOrbit.angle +=\n                    (((particle.retina.moveSpeed ?? minVelocity) * container.retina.pixelRatio) / percentDenominator) *\n                        container.retina.reduceFactor;\n            }\n            else {\n                const addV = Vector.origin;\n                addV.length = v.length;\n                addV.angle = v.angle;\n                particle.velocity.addTo(addV);\n            }\n        };\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = rangeColorToRgb(this.options.color) ?? {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = this.initialPosition?.copy() ?? this._calcPosition();\n    }\n    attract(particle) {\n        const container = this.container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, squareExp)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * absorbFactor * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < minOrbitLength)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this._updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this._updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= minRadius || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= minMass || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this._updateParticlePosition(particle, v);\n        }\n    }\n    async draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(origin.x, origin.y, this.size, minAngle, maxAngle, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n        await Promise.resolve();\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n}\n"],"names":["origin","maxAngle","Math","PI","AbsorberInstance","absorbers","container","options","position","_rangeColorToRgb","_this$initialPosition","_this$initialPosition2","_this","_classCallCheck","this","_calcPosition","exactPosition","calcPositionOrRandomFromSizeRanged","size","canvas","Vector","create","x","y","_updateParticlePosition","particle","v","destroyed","canvasSize","needsNewPosition","newPosition","calcPositionOrRandomFromSize","setTo","velocity","initialVelocity","absorberOrbit","undefined","orbits","_particle$retina$move","length","getDistance","getPosition","angle","getRandom","destroy","minSize","min","width","height","absorberOrbitDirection","orbitRadius","orbitAngle","orbitDirection","updateFunc","cos","sin","retina","moveSpeed","pixelRatio","percentDenominator","reduceFactor","addV","addTo","initialPosition","Absorber","load","dragging","name","opacity","getRangeValue","value","mass","density","limit","radius","color","rangeColorToRgb","b","g","r","copy","_createClass","key","draggable","mouse","interactivity","clicking","downPosition","pos","_getDistances","getDistances","dx","dy","distance","pow","getRadius","sizeFactor","_draw","_asyncToGenerator","_regeneratorRuntime","mark","_callee","context","wrap","_context","prev","next","translate","beginPath","arc","closePath","fillStyle","getStyleFromRgb","fill","Promise","resolve","stop","_x","apply","arguments","isPointInside"],"sourceRoot":""}