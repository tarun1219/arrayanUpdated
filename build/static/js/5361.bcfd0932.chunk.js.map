{"version":3,"file":"static/js/5361.bcfd0932.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/interaction-external-connect/browser/Utils.js","../node_modules/@tsparticles/interaction-external-connect/browser/Connector.js"],"sourcesContent":["import { clamp, colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, } from \"@tsparticles/engine\";\nconst gradientMin = 0, gradientMax = 1, defaultLinksWidth = 0;\nexport function gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\n    if (!color1 || !color2) {\n        return;\n    }\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(gradientMin, getStyleFromHsl(color1, opacity));\n    grad.addColorStop(clamp(gradStop, gradientMin, gradientMax), getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(gradientMax, getStyleFromHsl(color2, opacity));\n    return grad;\n}\nexport function drawConnectLine(context, width, lineStyle, begin, end) {\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n}\nexport function lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    if (!connectOptions) {\n        return;\n    }\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nexport function drawConnection(container, p1, p2) {\n    container.canvas.draw((ctx) => {\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, p1.retina.linksWidth ?? defaultLinksWidth, ls, pos1, pos2);\n    });\n}\n","import { ExternalInteractorBase, isInArray, } from \"@tsparticles/engine\";\nimport { Connect } from \"./Options/Classes/Connect.js\";\nimport { drawConnection } from \"./Utils.js\";\nconst connectMode = \"connect\", minDistance = 0;\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position, { connectModeDistance, connectModeRadius } = container.retina;\n            if (!connectModeDistance ||\n                connectModeDistance < minDistance ||\n                !connectModeRadius ||\n                connectModeRadius < minDistance ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            query.forEach((p1, i) => {\n                const pos1 = p1.getPosition(), indexOffset = 1;\n                for (const p2 of query.slice(i + indexOffset)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n            });\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(connectMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source?.connect);\n        }\n    }\n    reset() {\n    }\n}\n"],"names":["gradientMin","gradientMax","lineStyle","container","ctx","p1","p2","connectOptions","actualOptions","interactivity","modes","connect","context","opacity","gradStop","Math","floor","getRadius","color1","getFillColor","color2","sourcePos","getPosition","destPos","midRgb","colorMix","grad","createLinearGradient","x","y","addColorStop","getStyleFromHsl","clamp","getStyleFromRgb","gradient","links","drawConnection","canvas","draw","_p1$retina$linksWidth","ls","pos1","pos2","width","begin","end","drawLine","lineWidth","strokeStyle","stroke","drawConnectLine","retina","linksWidth","Connector","_ExternalInteractorBa","_inherits","_super","_createSuper","_classCallCheck","call","_createClass","key","value","this","connectModeDistance","distance","pixelRatio","connectModeRadius","radius","_interact","_asyncToGenerator","_regeneratorRuntime","mark","_callee","mousePos","_container$retina","query","_this","wrap","_context","prev","next","events","onHover","enable","status","mouse","position","abrupt","abs","particles","quadTree","queryCircle","p","isEnabled","forEach","i","_step","_iterator","_createForOfIteratorHelper","slice","s","n","done","distMax","xDiff","yDiff","err","e","f","Promise","resolve","stop","apply","arguments","particle","_particle$interactivi","isInArray","mode","options","Connect","_len","length","sources","Array","_key","_i","_sources","source","load","ExternalInteractorBase"],"sourceRoot":""}