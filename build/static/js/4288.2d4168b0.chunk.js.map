{"version":3,"file":"static/js/4288.2d4168b0.chunk.js","mappings":"kNAEaA,EAAc,WACvB,SAAAA,EAAYC,IAAWC,EAAAA,EAAAA,GAAA,KAAAF,GACnBG,KAAKF,UAAYA,EACjBE,KAAKC,MAAQ,CAAC,UAClB,CA0BC,OA1BAC,EAAAA,EAAAA,GAAAL,EAAA,EAAAM,IAAA,SAAAC,MAAA,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MACD,SAAAC,EAAaC,EAAUC,EAAWC,EAAQC,GAAO,IAAAf,EAAAgB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAZ,EAAAA,EAAAA,KAAAa,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACxCvB,KAAKC,MAAMuB,SAASX,GAAU,CAAFQ,EAAAE,KAAA,eAAAF,EAAAI,OAAA,iBAG3B3B,EAAYE,KAAKF,UAASuB,EAAAK,GACxBhB,EAASiB,QAAON,EAAAE,KACf,WADeF,EAAAK,IAEf,YADQL,EAAAK,GAAA,EAMR,WALSL,EAAAK,GAKD,uBAJLE,EAAAA,EAAAA,IAAclB,EAASmB,SAAU/B,EAAUgC,OAAOC,KAAMC,EAAAA,GAAOC,OAAQvB,EAASwB,YAAavB,GAAY,CAAFU,EAAAE,KAAA,eAAAF,EAAAI,OAAA,iBAShD,eAAAJ,EAAAI,OAAA,YATgD,OAKxB,GALwBX,GAKxFqB,EAAAA,EAAAA,IAAazB,EAASmB,SAAUnB,EAAS0B,YAApDrB,EAAED,EAAFC,GAAIC,EAAEF,EAAFE,GAAEC,EAA8EP,EAAS2B,SAAvBnB,EAAED,EAALqB,EAAUnB,EAAEF,EAALsB,IAC7ErB,EApBD,GAoBqBH,EAAKL,EAAS0B,WAAWI,QAC7CrB,EArBD,GAqBqBH,EAAKN,EAAS0B,WAAWI,QAC7CtB,GAtBD,GAsBsBH,GAAML,EAAS0B,WAAWI,QAC/CrB,GAvBD,GAuBsBH,GAAMN,EAAS0B,WAAWI,QAAO,CAAAnB,EAAAE,KAAA,gBAAAF,EAAAI,OAAA,kBAMb,OAAtD3B,EAAU2C,UAAUC,OAAOhC,OAAUiC,GAAW,GAAMtB,EAAAE,KAAA,GAChDqB,QAAQC,UAAS,yBAAAxB,EAAAyB,OAAA,GAAArC,EAAA,UAC1B,gBAAAsC,EAAAC,EAAAC,EAAAC,GAAA,OAAA7C,EAAA8C,MAAA,KAAAC,UAAA,EA1BA,MA0BAvD,CAAA,CA9BsB,E","sources":["../node_modules/@tsparticles/updater-out-modes/browser/DestroyOutMode.js"],"sourcesContent":["import { Vector, getDistances, isPointInside, } from \"@tsparticles/engine\";\nconst minVelocity = 0;\nexport class DestroyOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"destroy\"];\n    }\n    async update(particle, direction, _delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case \"normal\":\n            case \"outside\":\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                break;\n            case \"inside\": {\n                const { dx, dy } = getDistances(particle.position, particle.moveCenter), { x: vx, y: vy } = particle.velocity;\n                if ((vx < minVelocity && dx > particle.moveCenter.radius) ||\n                    (vy < minVelocity && dy > particle.moveCenter.radius) ||\n                    (vx >= minVelocity && dx < -particle.moveCenter.radius) ||\n                    (vy >= minVelocity && dy < -particle.moveCenter.radius)) {\n                    return;\n                }\n                break;\n            }\n        }\n        container.particles.remove(particle, undefined, true);\n        await Promise.resolve();\n    }\n}\n"],"names":["DestroyOutMode","container","_classCallCheck","this","modes","_createClass","key","value","_update","_asyncToGenerator","_regeneratorRuntime","mark","_callee","particle","direction","_delta","outMode","_getDistances","dx","dy","_particle$velocity","vx","vy","wrap","_context","prev","next","includes","abrupt","t0","outType","isPointInside","position","canvas","size","Vector","origin","getRadius","getDistances","moveCenter","velocity","x","y","radius","particles","remove","undefined","Promise","resolve","stop","_x","_x2","_x3","_x4","apply","arguments"],"sourceRoot":""}