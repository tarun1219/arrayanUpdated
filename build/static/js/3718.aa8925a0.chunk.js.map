{"version":3,"file":"static/js/3718.aa8925a0.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/shape-emoji/browser/EmojiDrawer.js"],"sourcesContent":["import { executeOnSingleOrMultiple, getRangeMax, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { validTypes } from \"./Constants.js\";\nconst defaultFont = '\"Twemoji Mozilla\", Apple Color Emoji, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"EmojiOne Color\"';\nexport class EmojiDrawer {\n    constructor() {\n        this._emojiShapeDict = new Map();\n    }\n    destroy() {\n        for (const [key, emojiData] of this._emojiShapeDict) {\n            if (emojiData instanceof ImageBitmap) {\n                emojiData?.close();\n                this._emojiShapeDict.delete(key);\n            }\n        }\n    }\n    async draw(data) {\n        const { drawEmoji } = await import(\"./Utils.js\");\n        drawEmoji(data);\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            return;\n        }\n        const promises = [loadFont(defaultFont)], shapeOptions = validTypes\n            .map((t) => options.particles.shape.options[t])\n            .find((t) => !!t);\n        if (shapeOptions) {\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                if (shape.font) {\n                    promises.push(loadFont(shape.font));\n                }\n            });\n        }\n        await Promise.all(promises);\n    }\n    particleDestroy(particle) {\n        delete particle.emojiData;\n    }\n    async particleInit(container, particle) {\n        const double = 2, shapeData = particle.shapeData;\n        if (!shapeData?.value) {\n            return;\n        }\n        const emoji = itemFromSingleOrMultiple(shapeData.value, particle.randomIndexData), font = shapeData.font ?? defaultFont;\n        if (!emoji) {\n            return;\n        }\n        const key = `${emoji}_${font}`, existingData = this._emojiShapeDict.get(key);\n        if (existingData) {\n            particle.emojiData = existingData;\n            return;\n        }\n        const canvasSize = getRangeMax(particle.size.value) * double;\n        let emojiData;\n        const maxSize = getRangeMax(particle.size.value);\n        if (typeof OffscreenCanvas !== \"undefined\") {\n            const canvas = new OffscreenCanvas(canvasSize, canvasSize), context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(emoji, maxSize, maxSize);\n            emojiData = canvas.transferToImageBitmap();\n        }\n        else {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = canvasSize;\n            canvas.height = canvasSize;\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(emoji, maxSize, maxSize);\n            emojiData = canvas;\n        }\n        this._emojiShapeDict.set(key, emojiData);\n        particle.emojiData = emojiData;\n        await Promise.resolve();\n    }\n}\n"],"names":["defaultFont","EmojiDrawer","_classCallCheck","this","_emojiShapeDict","Map","_createClass","key","value","_step","_iterator","_createForOfIteratorHelper","s","n","done","_step$value","_slicedToArray","emojiData","ImageBitmap","close","delete","err","e","f","_draw","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","_yield$import","wrap","_context","prev","next","sent","drawEmoji","stop","_x","apply","arguments","_init","_callee2","container","options","promises","shapeOptions","_context2","actualOptions","validTypes","find","t","isInArray","particles","shape","type","abrupt","loadFont","map","executeOnSingleOrMultiple","font","push","Promise","all","_x2","particle","_particleInit","_callee3","_shapeData$font","double","shapeData","emoji","existingData","canvasSize","maxSize","canvas","context","_canvas","_context3","_context4","itemFromSingleOrMultiple","randomIndexData","concat","get","getRangeMax","size","OffscreenCanvas","getContext","textBaseline","textAlign","fillText","transferToImageBitmap","document","createElement","width","height","set","resolve","_x3","_x4"],"sourceRoot":""}